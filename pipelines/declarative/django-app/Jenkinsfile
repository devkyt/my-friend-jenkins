pipeline {

  agent {
    kubernetes {
      inheritFrom "slave"
      defaultContainer "gke-toolkit"
      yamlFile "Django.yaml"
    }
  }

  parameters {
        string(name: 'BRANCH', defaultValue: 'staging', description: 'Branch to use')
        choice(name: 'ENVIRONMENT', choices: ['staging', 'production'], description: 'Where to deploy')
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Apply database migrations')
  }

  environment {
        CLUSTER = "${params.ENVIRONMENT == "staging" ? env.STAGING_CLUSTER : env.PROD_CLUSTER}"
        NAMESPACE = "default"
        REPO = "github.com/stacktome/account-admin.git"
        USER = getBuildUser()
  }

  stages {
    stage("Send Start Message") {
      steps {
        slackSend(color: "good", message: "Build started: ${env.BUILD_URL} (branch=${params.BRANCH}, env=${params.ENVIRONMENT}, user=${USER})")
      }
    }


    stage("Get Code from Repository") {
      steps {
        container("jnlp") {
          withCredentials([usernamePassword(credentialsId: 'jenkins-stacktome',
                                            usernameVariable: 'GITHUB_APP',
                                            passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
              checkout scmGit(
                branches: [[name: "${params.BRANCH}"]],
                userRemoteConfigs: [[url: "https://${GITHUB_APP}:${GITHUB_ACCESS_TOKEN}@${REPO}"]])
          }
        }
      }
    }

    stage("Setup Database") {
      steps {
        container("db") {
          sh """
          psql -U postgres -c 'create database django;'
          psql -U postgres -c \"create user django with encrypted password 'test';\"
          psql -U postgres -c 'ALTER USER django WITH SUPERUSER;'
          """
        }
      }
    }

    stage("Install Dependencies") {
      steps {
        container("python") {
          sh "pip install -r requirements.txt"
        }
      }
    }
    
    stage("Run Tests") {
      steps {
        container("python") {
          sh "python -W ignore manage.py test ./*/tests/ --pattern='*.py' -v 2"
        }
      }
    }

    stage("Build Account Admin Image") {
      steps {
        sh """
        gcloud auth configure-docker
        docker build \
          -t eu.gcr.io/stacktome-prod/account-admin:${env.BUILD_NUMBER} \
          -t eu.gcr.io/stacktome-prod/account-admin:${params.ENVIRONMENT} \
          -t eu.gcr.io/stacktome-prod/account-admin:latest .
        docker push eu.gcr.io/stacktome-prod/account-admin --all-tags
        """
      }
    }
    
    stage("Connect to Cluster") {
      steps {
          sh "gcloud container clusters get-credentials staging --zone=${GKE_ZONE}"
      }
    }

    stage("Deploy Account Admin") {
      steps {
          sh """
          helm upgrade --install account-admin ./helm/account-admin \
            -f ./helm/account-admin/values.${ENVIRONMENT}.yaml \
            --set imageTag=${env.BUILD_NUMBER} \
            --set migrate=${params.MIGRATE} \
            --namespace ${NAMESPACE} \
            --wait
          """
      }
    }

    stage("Trigger Swagger Update") {
      steps {
        build(
          job: "Swagger", 
          parameters: [string(name: "BRANCH", value: "master"), 
                       string(name: "ENVIRONMENT", value: "${params.ENVIRONMENT}")],
          wait: false
          )
      }
    }

  }

  post {
    success {
      slackSend(color: "good", message: "Build completed: ${env.BUILD_URL}")
    }
    failure {
      slackSend(color: 'danger', message: "Build failed: ${env.BUILD_URL}")
    }
  }

}

def getBuildUser() {
    try {
      USER = currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
      return USER
    } catch(Exception ex) {
      return 'Jenkins-Trigger'
    }
}

