pipeline {

  agent {
    kubernetes {
      inheritFrom "slave"
      defaultContainer "gke-toolkit"
      yamlFile "OpenApiGenerator.yaml"
    }
  }

  parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to use')
        choice(name: 'ENVIRONMENT', choices: ['staging', 'production'], description: 'Where to deploy')
  }

  environment {
        CLUSTER = "${params.ENVIRONMENT == "production" ? env.PROD_CLUSTER: env.STAGING_CLUSTER}"
        NAMESPACE = "default"
        REPO = "github.com/org/repo.git"
        USER = getBuildUser()
  }

  stages {
    stage("Send Start Message") {
      steps {
        slackSend(color: "good", message: "Build started: ${env.BUILD_URL} (branch=${params.BRANCH}, env=${params.ENVIRONMENT}, user=${USER})")
      }
    }


    stage("Get Code from Repository") {
      steps {
        container("jnlp") {
          withCredentials([usernamePassword(credentialsId: 'jenkins-stacktome',
                                            usernameVariable: 'GITHUB_APP',
                                            passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
              checkout scmGit(
                branches: [[name: "${params.BRANCH}"]],
                userRemoteConfigs: [[url: "https://${GITHUB_APP}:${GITHUB_ACCESS_TOKEN}@${REPO}"]])
          }
        }
      }
    }

    stage("Generate Swagger Schema") {
      steps {
          dir("containers/swagger") {
              sh """
              gsutil cp gs://stacktome-swagger-schemas/account-admin/${params.ENVIRONMENT.toUpperCase()}.yaml django.yaml
              gsutil cp gs://stacktome-swagger-schemas/event-service/master_v3.yaml events.yaml
              gsutil cp gs://stacktome-swagger-schemas/rec-service/master_v3.yaml recs.yaml
              gsutil cp gs://stacktome-swagger-schemas/review-service/master_v3.yaml reviews.yaml
              """

              container("openapi-generator") {
                sh "npx openapi-merge-cli"
              }
          }
      }
    }

    stage("Build Swagger UI Image") {
      steps {
          dir("containers/swagger") {
              sh """
              gcloud auth configure-docker
              docker build -t eu.gcr.io/stacktome-prod/swagger-ui-v3:${env.BUILD_NUMBER} -t eu.gcr.io/stacktome-prod/swagger-ui-v3:${params.ENVIRONMENT} .
              docker push eu.gcr.io/stacktome-prod/swagger-ui-v3 --all-tags
              """
          }
      }
    }
    
    stage("Connect to Cluster") {
      steps {
          sh "gcloud container clusters get-credentials staging --zone=${GKE_ZONE}"
      }
    }

    stage("Deploy Swagger UI") {
      steps {
          sh """
          helm upgrade --install swagger-ui ./helm/ \
            -f ./helm/values/${params.ENVIRONMENT}.yaml \
            --set imageTag=${env.BUILD_NUMBER} \
            --namespace ${NAMESPACE} \
            --wait
          """
      }
    }

  }

  post {
    success {
      slackSend(color: "good", message: "Build completed: ${env.BUILD_URL}")
    }
    failure {
      slackSend(color: 'danger', message: "Build failed: ${env.BUILD_URL}")
    }
  }

}

def getBuildUser() {
    try {
      USER = currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
      return USER
    } catch(Exception ex) {
      return 'jenkins'
    }
}
